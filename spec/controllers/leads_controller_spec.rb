require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe LeadsController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Lead. As you add validations to Lead, be sure to
  # adjust the attributes here as well.
  let(:valid_email) {{name: nil, email: 'user@domain.com'}}
  let(:invalid_email) {{name: nil, email: 'sadcxz'}}
  let(:nil_email) {{name: nil, email: 1}}

  describe "GET #index" do
    xit "assigns all leads as @leads" do
      lead = Lead.create! valid_email
      get :index, {}, valid_session
      expect(assigns(:leads)).to eq([lead])
    end
  end

  describe "POST #create" do
    context "with valid email" do
      it "creates a new Lead" do
        expect {
          post :create, lead: valid_email, format: :json
        }.to change(Lead, :count).by(1)
      end

      it "assigns a newly created lead as @lead" do
        post :create, lead: valid_email, format: :json
        expect(assigns(:lead)).to be_a(Lead)
        expect(assigns(:lead)).to be_persisted
      end

      it "return success code" do
        post :create, lead: valid_email, format: :json
        expect(response.success?).to be true
      end

      it "return contact message" do
        post :create, lead: valid_email, format: :json
        expect(response.body).to eq('Entraremos em contato o mais rápido possível!')
      end
    end

    context "with invalid email" do
      it "assigns a newly created but unsaved lead as @lead" do
        post :create, lead: invalid_email, format: :json
        expect(assigns(:lead)).to be_a_new(Lead)
      end

      it "returns invalid email message" do
        post :create, lead: invalid_email, format: :json
        expect(response.body).to eq("Email inválido")
      end
    end

    context "with duplicate email" do
      it "creates only the first Lead" do
        expect {
          post :create, lead: valid_email, format: :json
          post :create, lead: valid_email, format: :json
        }.to change(Lead, :count).by(1)
      end

      it "returns duplicate email message" do
        post :create, lead: valid_email, format: :json
        post :create, lead: valid_email, format: :json
        expect(response.body).to eq("Email já está em uso")
      end
    end
  end
end
